<h1>
Class &amp; Object</h1>
<p>
When we build a system, there are a lot of pieces. We need a way to group things together to manage the data. Java uses classes and object to do this. A class is a template. An object is an instance of a class. What does that really mean?
</p>
<p>Let's take this form below for example. This is a signed up form.</p>

<form width="500px" class="inline-block">
  <h2>User Sign Up</h2>
  <div class="form-group">
    <label for="name">Name</label>
    <input type="text" class="form-control" id="name" aria-describedby="name" placeholder="Name">
  </div>
  <div class="form-group">
    <label for="exampleInputEmail1">Email address</label>
    <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">
  </div>
  <div class="form-group">
    <label for="exampleInputPassword1">Password</label>
    <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
  </div>
</form>

<p>
This form is the template (class). Everytime the user opens up the sign up form, the system will look at the User class and figure out what fields to display. Based on the class, the system intialize the form with the instance of the class; the instance is called object. Every user has their own instance to populate the fields with their own values. A class defines what fields and functionality the objects should have. An object is the instance of the class, it contains the actual data.
</p>
<p>Here is what the class looks like in Java:</p>
<pre><code class="java">public class User {
  private String name;
  private String email;
  private String password;

}</code></pre>
<p>Remember Java data is like Lego? The primitive data (e.g. int, double, char) is the base of the building block. It can use the small pieces to build bigger pieces like this User right here. Multiple chars are used to create a String and multiple Strings are used to create a User.</p>

<h2>Class</h2>
<p>
Classes are usually nouns such as <code class="inline">System</code> or <code class="inline">Map</code>. Here is a class named <code class="inline">User</code> without the fields.</p>
<img src="/images/user_class.png" width="400px">

<ol class="ordered-list">
  <li><b>Access modifier</b> <code class="inline">public</code> - also call accessor. This defines the visibility of the class which means which file can see the code in this class. The options are: public, protected, or default (none). For now, public will be used for all the code created in this class.</li>
<li><b>class</b> - this is a keyword. It is required to declare a class. In Java, keywords have special meanings. Java keyword cannot be used for variable name.</li>
<li><b>class name</b> `User` - this is the name of the class. It can be named anything that is not a Java keyword (e.g. class, int). By convention, each word in the name is capitalized. </li>
<li><b>{}</b> - open and close curly braces. Place the actual code inside these curly braces.</li></ol>
<br>

<h3>
  Letâ€™s practice!
</h3>
<ol class="ordered-list">
  <li>
    <p>
      Create a class called Employee.
    </p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 401, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
  <%= if @current_user.experiment > 1 do %>
  <li>
    <p>
      Create a class called Menu.
    </p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 402, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
  <% end %>
  <%= if @current_user.experiment > 2 do %>
  <li>
    <p>
      Create a class called Order.
    </p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 403, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
  <% end %>
  <%= if @current_user.experiment > 3 do %>
  <li>
    <p>
      Create a class called Drink.
    </p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 404, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
  <% end %>
  <%= if @current_user.experiment > 4 do %>
  <li>
    <p>
      Create a class called Food.
    </p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 405, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
  <% end %>
</ol>

<a href="/lessons/instance_variables">  <button class="rounded-lg hover:bg-zinc-700 active:text-white/80 primary-btn lesson-next">
    Next: Instance Variables
  </button></a>
