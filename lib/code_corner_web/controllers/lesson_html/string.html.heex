<h1>
  String
</h1>
<p>
  String is a sequence of characters. Remember <code class="inline">char</code>
  can only hold one character. In order to hold multiple characters, Java has a class named <code class="inline">String</code>. The most common way to create a String is put the text in double quote (<code class="inline">&quot;</code>) like this:
</p>
<pre><code class="jsx">String cafeName = &quot;Java Café&quot;;</code></pre>
<p>
  Similar to primitive data type, you can declare a String variable with the type, variable name, and the value. In the real world, text are rarely one char long, therefore, String is more often used when dealing with text. For example, for the cafe, a String can be the cafe name or the menu item. Here are a few ways to create a new String:
</p>
<pre><code class="java">String word = &quot;coffee&quot;;

String phrase = &quot;Welcome to Java Café&quot;;

String oneCharacter = &quot;a&quot;;

String empty = new String();
String empty = &quot;&quot;;</code></pre>
<h2>
  Converting other data type to String
</h2>
<p>
  There are usually two ways to convert a primitive data type to a String. One way is to use the primitive wrapper class to convert it. Another way is to use
  <code class="inline">String.valueOf()</code>
  Both are equally valid.
</p>
<pre><code class="java">//using Integer which is the wrapper class for int
String quantity1 = Integer.toString(5); // &quot;5&quot;

//using String.valueOf
String quantity2 = String.valueOf(5); // &quot;5&quot;</code></pre>
<p>
  Similarly with double:
</p>
<pre><code class="java">String tax1 = Double.toString(0.06); // &quot;0.06&quot;
String tax2 = String.valueOf(0.06); // &quot;0.06&quot;</code></pre>
<p>
  Character:
</p>
<pre><code class="java">String character = Character.toString(&#39;c&#39;); // &quot;c&quot;
String character2 = String.valueOf(&#39;c&#39;); // &quot;c&quot;</code></pre>
<h2>
  String concatenation
</h2>
<p>
  To combine two or more strings together, use the <code class="inline">+</code> sign
</p>
<pre><code class="java">String greeting = &quot;Hello, &quot;;
String customerName = &quot;Riley&quot;;

//use + to combine the string
String message = greeting + customerName;</code></pre>
<p>
  To concatenate a String with a primitive data, use the <code class="inline">+</code>
  sign as long as the string comes first.
</p>
<pre><code class="java">int quantity = 2;
String order = &quot;I would like &quot; + quantity + &quot; black coffee&quot;;</code></pre>
<p>
  If an integer comes before the string, Java cannot combine an integer with a String. First, convert the integer into a String, then combine it with the other string.
</p>
<pre><code class="java">int quantity = 2;
// 1 black coffee
String order = String.valueOf(quantity) + &quot; black coffee&quot;;</code></pre>
<p>
  Note this is a shortened version to learn the essential for the research project.
</p>
