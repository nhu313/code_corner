<h1>Method</h1>
<p>Methods are functionality of the objects. It specify what the object can do. For example, given a gift card class, there are two functionalities it can have, <b>getBalance()</b> and <b>deductBalance()</b>.</p>
<pre><code class="java">public class GiftCard {
  private double balance;

  public double getBalance() {
    return this.balance;
  }

  public void deductBalance(double amount) {
    this.balance = this.balance - amount;
  }
}</code></pre>

Let's break this down.

<h3>Anatamy of a method</h3>
A method has the following:
<img src="/images/method.png" width="400">
<ol class="ordered-list">
  <li><b>access modifier</b> <code class="inline">public</code> - defines who can use this method. We will use public for all methods.</li>
<li><b>return type</b> <code class="inline">double</code> - the output data type</li>
<li><b>method name</b> <code class="inline">getBalance</code> - short concise name (without space) to describe what the method does. By convention, it should starts with lower case. Each word after is capitalized.</li>
<li><b>arguments/inputs</b> - each method can have zero (getBalance()), one (deductBalance(double amount)), or more inputs.</li>
</ol>

<h3>Inputs</h3>
<p>Inputs are data that is needed to perform the action. For our gift card, everytime the user spends the gift card, we need to get the current balance and subtract it from the amount used.</p>
<pre><code class="java">public double deductBalance(double amount) {
    this.balance = this.balance - amount;
  }</code></pre>
<p>The input needs a type (double) and the variable name (amount).
  To call the method deductBalance, we need to create a GiftCard instance, then call it with the data type specified in the input with the pattern <b>object.methodName(inputs)</b>.
  <pre><code class="java">GiftCard myGiftCard = new GiftCard();
myGiftCard.deductBalance(10.0);</code></pre>

For multiple inputs, use a comma to separate the inputs. Here's an example of a method with two inputs:</p>
<pre><code class="java">public String sendReceipt(String recipientEmail, String emailBody) {
    // code to email receipt
  }</code></pre>

<p>To call the sendReceipt method, use <b>object.methodName(inputs)</b>:</p>
<pre><code class="java">GiftCard myGiftCard = new GiftCard();
myGiftCard.sendReceipt("tester@yahoo.com", "You have 40.0 left.");</code></pre>

<h3>Outputs/Return Type</h3>
<p>The return type is the data type of the output. For the gift card balance, we return the balance instance variable, which has the type double.</p>
<pre><code class="java">public class GiftCard {
  private double balance;

  public double getBalance() {
    return this.balance;
  }
}</code></pre>

Use <b>void</b> to specify there is no return type. This means the code doesn't have any output.
<pre><code class="java">public void deductBalance(double amount) {
    this.balance = this.balance - amount;
  }</code></pre>

If we want to change so the method deductBalance returns the balance, we can change the code to this:
<pre><code class="java">public double deductBalance(double amount) {
    this.balance = this.balance - amount;
    return this.balance;
  }</code></pre>
<p>The method must have the keyword <b>return</b> if it has a return type.</p>

<p>We can call the deductBalance and store the return value in a variable like this:</p>
<pre><code class="java">GiftCard myGiftCard = new GiftCard();
double remainingBalance = myGiftCard.deductBalance(14.0);
</code></pre>

<h3>Calling a method inside a method</h3>
<p>Everytime the giftcard is used, we should an email to notify the user. Let's modify the deductBalance to take in an email and get it to call sendReceipt. To call a method inside a method, use <b>methodName(inputs)</b></p>
<pre><code class="java">public class GiftCard {
  private double balance;

  public double deductBalance(double amount, String recipientEmail) {
    this.balance = this.balance - amount;

    // methodName(inputs)
    sendReceipt(amount, recipientEmail);
  }

  public String sendReceipt(double amountUsed, String recipientEmail) {
    // code to email receipt
  }
}</code></pre>

<p>Because deductBalance is already part of the object, we don't need an object in front of the method.</p>

<h3>Practice</h3>
<p>Given the <b>OrderItem</b> class, with the following instance variable. Let's create some methods for them. Make all the accessor public.</p>

<pre><code class="java">public class OrderItem {
  private String itemName;
  private double price;
  private int quantity;
  private String serverName;
  private double total;
}</code></pre>

<ol class="ordered-list">
  <li>
    <p>Create a method called <code class="inline">getItemName()</code> with no input and it returns the instance variable <code class="inline">itemName</code> of type String.</p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 501, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
  <%= if @current_user.experiment > 1 do %>
  <li>
    <p>Create a method called <code class="inline">getPrice()</code> that will return a double with no input. It returns an instance variabled called <code class="inline">price</code>.</p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 502, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
  <% end %>
  <%= if @current_user.experiment > 2 do %>
  <li>
    <p>Create a method called <code class="inline">setQuantity()</code> with no output. It takes one input of type int called <code class="inline">quantity</code>.</p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 503, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
  <% end %>
  <%= if @current_user.experiment > 3 do %>
  <li>
    <p>Create a method called <code class="inline">setServerName()</code> with one String input called <code class="inline">serverName</code>. The method return a String.</p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 504, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
  <% end %>
  <%= if @current_user.experiment > 4 do %>
  <li>
    <p>Create a method called <code class="inline">getTotal()</code> with two inputs, int quantity and double price. The return type should be a double.</p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 505, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
  <% end %>
</ol>
<a href="/lessons/object">  <button class="rounded-lg hover:bg-zinc-700 active:text-white/80 primary-btn lesson-next">
    Next: Summary
  </button></a>
