<h1>Constructor</h1>
<p>In order create an instance (object) of a class, a class need to have a constructor. All classes has a default empty constructor like this:</p>
<pre><code class="java">public class User {
  public User() {

  }
}</code></pre>

<ol class="ordered-list">
  <li><b>Access modifier</b> <code class="inline">public</code></li>
  <li><b>class name</b> <code class="inline">User</code> - this name of the class</li>
  <li><b>{}</b> - open and close curly braces.</li>
</ol>
<br>

<p>In order to create the form, a new User object needs to be initialized with the keyword <b>new</b>. When the system sees the word <b>new</b> it looks at the contructor to figure out how to initialize the user.</p>
<p>Right now, the contructor doesn't do anything. But what if all users has a default password of "password1234". Defaults can be specified in the constructor.</p>
<pre><code class="java">public class User {
  private String password;

  public User() {
    password = "password1234";
  }
}</code></pre>
<p>Everytime a new User is initialized, they have the password "password1234". Often times, developer uses the keyword <b>this</b> to refer to the instance variable. This code is the same as the code above:</p>
<pre><code class="java">public class User {
  private String password;

  public User() {
    this.password = "password1234";
  }
}</code></pre>
<p>When the system sees the keyword <b>this</b>, it (usually) looks for an instance variable's name after the period. In this case, it looks for an instance variable named "password".</p>

<h2>Inputs</h2>
<p>If an object has a required field, we can specified it in the constructor. For example, in order to create a User, we need a name. First we declare the required field (String userInputName), then we update the internal instance variable with the value passed in.</p>

<pre><code class="java">public class User {
  private String name;

  public User(String userInputName) {
    this.name = userInputName;
  }
}</code></pre>

<p>To create a user, we need to pass in the name.</p>
<pre><code class="java">User carol = new User("Carol");</code></pre>
Note the input type has to match what is declared in the constructor. For the user, the constructor takes a String, therefore, I cannot create a user with an int like the code below.
<pre><code class="java">User carol = new User(11); // Error</code></pre>

<p>User a comma specify more than one input.
<pre><code class="java">public class User {
  private String name;
  private int age;
  private boolean vip;

  public User(String userInputName, int age, boolean isVip) {
    this.name = userInputName;
    this.age = age;
    this.vip = isVip;
  }
}</code></pre>

Now, in order to create a new User, we must have 3 inputs. The input must match the constructure signature. The constructor for the user specify a String, follow by an int, then a boolean.</p>
<pre><code class="java">User carol = new User("Carol", 10, false);</code></pre>

<h3>Let's practice!</h3>
<p>Given this Employee class with the following instance variables.</p>
<pre><code class="java">public class Employee {
  private String name;
  private String email;
  private double hourlyWage;
  private int age;
  private boolean vip;
}</code></pre>

<ol class="ordered-list">
  <li>
    <p>
      Create a constructor for the Employee class that takes a name (String) and emailAddress (String). Only the constructor is needed.
    </p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 801, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
  <%= if @current_user.experiment > 1 do %>
  <li>
    <p>
      Create a constructor for the Employee class that takes a name (String) and hourlyWage (double). Only the constructor is needed.
    </p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 802, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
    <% end %>
  <%= if @current_user.experiment > 2 do %>
  <li>
    <p>
      Create a constructor for the Employee class that takes a name (String) and age (int). Only the constructor is needed.
    </p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 803, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
    <% end %>
  <%= if @current_user.experiment > 3 do %>
  <li>
    <p>
      Create a constructor for the Employee class that takes a name (String), age (int), and hourlyWage (double). Only the constructor is needed.
    </p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 804, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
    <% end %>
  <%= if @current_user.experiment > 4 do %>
  <li>
    <p>
      Create a constructor for the Employee with no input. Only the constructor is needed.
    </p>
    <%= live_render(@conn, CodeCornerWeb.PracticeProblemLive, session: %{"problem_id" => 805, "user_id" => @current_user.id, "input_type" => "textarea"}) %>
  </li>
    <% end %>
</ol>
